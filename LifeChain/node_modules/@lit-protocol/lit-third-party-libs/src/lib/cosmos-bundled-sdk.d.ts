import { assertIsDeliverTxSuccess, SigningStargateClient, StdFee, calculateFee, GasPrice, coins } from "@cosmjs/stargate";
import { encodeSecp256k1Signature, rawSecp256k1PubkeyToRawAddress } from "@cosmjs/amino";
import { Secp256k1, sha256, ExtendedSecp256k1Signature } from "@cosmjs/crypto";
import { toBech32, fromHex } from "@cosmjs/encoding";
import { makeSignBytes } from "@cosmjs/proto-signing";
interface CosmosBundledSDKType {
    encodeSecp256k1Signature: typeof encodeSecp256k1Signature;
    rawSecp256k1PubkeyToRawAddress: typeof rawSecp256k1PubkeyToRawAddress;
    Secp256k1: typeof Secp256k1;
    sha256: typeof sha256;
    ExtendedSecp256k1Signature: typeof ExtendedSecp256k1Signature;
    toBech32: typeof toBech32;
    fromHex: typeof fromHex;
    makeSignBytes: typeof makeSignBytes;
    assertIsDeliverTxSuccess: typeof assertIsDeliverTxSuccess;
    SigningStargateClient: typeof SigningStargateClient;
    StdFee: StdFee;
    calculateFee: typeof calculateFee;
    GasPrice: typeof GasPrice;
    coins: typeof coins;
}
export declare const CosmosBundledSDK: CosmosBundledSDKType;
export {};
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
