"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeIrys = void 0;
const base_1 = require("./base");
const tokens_1 = __importDefault(require("./tokens"));
class NodeIrys extends base_1.BaseNodeIrys {
    /**
     * Constructs a new Irys instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param key - private key (in whatever form required)
     */
    constructor({ url, token, key, config }) {
        super({
            url,
            config,
            getTokenConfig: (irys) => {
                return (0, tokens_1.default)(irys, token.toLowerCase(), key, irys.api.getConfig().url.toString(), config === null || config === void 0 ? void 0 : config.providerUrl, config === null || config === void 0 ? void 0 : config.contractAddress, config === null || config === void 0 ? void 0 : config.tokenOpts);
            },
        });
    }
    static init(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, token, privateKey, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;
            const Irys = new NodeIrys({
                url,
                token,
                key: signingFunction ? publicKey : privateKey,
                config: {
                    providerUrl,
                    timeout,
                    contractAddress,
                    tokenOpts: { signingFunction, collectSignatures },
                },
            });
            yield Irys.ready();
            return Irys;
        });
    }
}
exports.NodeIrys = NodeIrys;
exports.default = NodeIrys;
//# sourceMappingURL=irys.js.map